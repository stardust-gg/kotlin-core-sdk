/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package gg.stardust.coresdk.models

import gg.stardust.coresdk.models.SDTemplateCreateRequestProps

import com.squareup.moshi.Json
import java.io.Serializable

/**
 * 
 *
 * @param name The name of the template (ex. Bronze Axe)
 * @param cap u96 Number as String (ex. 200000000) 
 * @param type FT is a currency where every instance is the same, NFT is where every token instance differes (ex. FT)
 * @param props 
 * @param contractType The type of custom contract to use for this template. Default will use a shared contract.
 * @param ownerAddress Blockchain address to set as owner of the custom contract. Required if contractType is set.
 * @param publicContractMetadata Returned to marketplaces as contract metadata
 * @param symbol For ERC20 contracts, this is the ticker symbol
 */


data class SDTemplateCreateRequest (

    /* The name of the template (ex. Bronze Axe) */
    @Json(name = "name")
    val name: kotlin.String,

    /* u96 Number as String (ex. 200000000)  */
    @Json(name = "cap")
    val cap: kotlin.String,

    /* FT is a currency where every instance is the same, NFT is where every token instance differes (ex. FT) */
    @Json(name = "type")
    val type: SDTemplateCreateRequest.Type,

    @Json(name = "props")
    val props: SDTemplateCreateRequestProps,

    /* The type of custom contract to use for this template. Default will use a shared contract. */
    @Json(name = "contractType")
    val contractType: SDTemplateCreateRequest.ContractType? = null,

    /* Blockchain address to set as owner of the custom contract. Required if contractType is set. */
    @Json(name = "ownerAddress")
    val ownerAddress: kotlin.String? = null,

    /* Returned to marketplaces as contract metadata */
    @Json(name = "publicContractMetadata")
    val publicContractMetadata: kotlin.Any? = null,

    /* For ERC20 contracts, this is the ticker symbol */
    @Json(name = "symbol")
    val symbol: kotlin.String? = null

) : Serializable {
    companion object {
        private const val serialVersionUID: Long = 123
    }

    /**
     * FT is a currency where every instance is the same, NFT is where every token instance differes (ex. FT)
     *
     * Values: fT,nFT
     */
    enum class Type(val value: kotlin.String) {
        @Json(name = "FT") fT("FT"),
        @Json(name = "NFT") nFT("NFT");
    }
    /**
     * The type of custom contract to use for this template. Default will use a shared contract.
     *
     * Values: internalMinusMint,eRC721,eRC20
     */
    enum class ContractType(val value: kotlin.String) {
        @Json(name = "internal-mint") internalMinusMint("internal-mint"),
        @Json(name = "ERC721") eRC721("ERC721"),
        @Json(name = "ERC20") eRC20("ERC20");
    }
}

