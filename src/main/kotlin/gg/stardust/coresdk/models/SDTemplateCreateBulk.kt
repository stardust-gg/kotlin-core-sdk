/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package gg.stardust.coresdk.models

import gg.stardust.coresdk.models.SDTemplateCreateBulkProps

import com.squareup.moshi.Json
import java.io.Serializable

/**
 * 
 *
 * @param name The name of the template (ex. Bronze Axe)
 * @param image image url
 * @param cap u96 Number as String (ex. 200000000), default 39614081257132168796771975168 
 * @param contractType The type of custom contract to use for this template. Default will use a shared contract.
 * @param type FT is a currency where every instance is the same, NFT is where every token instance differes (ex. FT)
 * @param description Description of template
 * @param activeListing Set if the Template is active or not
 * @param ownerAddress Blockchain address to set as owner of the custom contract, if contractType is passed in.
 * @param props 
 * @param publicContractMetadata Returned to marketplaces as contract metadata
 * @param publicTokenMetadata Inherited by tokens, and returned to marketplaces as token metadata
 */


data class SDTemplateCreateBulk (

    /* The name of the template (ex. Bronze Axe) */
    @Json(name = "name")
    val name: kotlin.String,

    /* image url */
    @Json(name = "image")
    val image: kotlin.String,

    /* u96 Number as String (ex. 200000000), default 39614081257132168796771975168  */
    @Json(name = "cap")
    val cap: kotlin.String? = null,

    /* The type of custom contract to use for this template. Default will use a shared contract. */
    @Json(name = "contractType")
    val contractType: SDTemplateCreateBulk.ContractType? = null,

    /* FT is a currency where every instance is the same, NFT is where every token instance differes (ex. FT) */
    @Json(name = "type")
    val type: SDTemplateCreateBulk.Type? = null,

    /* Description of template */
    @Json(name = "description")
    val description: kotlin.String? = null,

    /* Set if the Template is active or not */
    @Json(name = "activeListing")
    val activeListing: kotlin.Boolean? = null,

    /* Blockchain address to set as owner of the custom contract, if contractType is passed in. */
    @Json(name = "ownerAddress")
    val ownerAddress: kotlin.String? = null,

    @Json(name = "props")
    val props: SDTemplateCreateBulkProps? = null,

    /* Returned to marketplaces as contract metadata */
    @Json(name = "publicContractMetadata")
    val publicContractMetadata: kotlin.Any? = null,

    /* Inherited by tokens, and returned to marketplaces as token metadata */
    @Json(name = "publicTokenMetadata")
    val publicTokenMetadata: kotlin.Any? = null

) : Serializable {
    companion object {
        private const val serialVersionUID: Long = 123
    }

    /**
     * The type of custom contract to use for this template. Default will use a shared contract.
     *
     * Values: eRC721
     */
    enum class ContractType(val value: kotlin.String) {
        @Json(name = "ERC721") eRC721("ERC721");
    }
    /**
     * FT is a currency where every instance is the same, NFT is where every token instance differes (ex. FT)
     *
     * Values: fT,nFT
     */
    enum class Type(val value: kotlin.String) {
        @Json(name = "FT") fT("FT"),
        @Json(name = "NFT") nFT("NFT");
    }
}

