/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package gg.stardust.coresdk.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import gg.stardust.coresdk.models.Error
import gg.stardust.coresdk.models.SDTemplateCountResponse
import gg.stardust.coresdk.models.SDTemplateCreateRequest
import gg.stardust.coresdk.models.SDTemplateCreateResponse
import gg.stardust.coresdk.models.SDTemplateGetAllResponse
import gg.stardust.coresdk.models.SDTemplateGetResponse
import gg.stardust.coresdk.models.SDTemplateGetTokensResponse
import gg.stardust.coresdk.models.SDTemplateMutateRequest

import com.squareup.moshi.Json

import gg.stardust.coresdk.infrastructure.ApiClient
import gg.stardust.coresdk.infrastructure.ApiResponse
import gg.stardust.coresdk.infrastructure.ClientException
import gg.stardust.coresdk.infrastructure.ClientError
import gg.stardust.coresdk.infrastructure.ServerException
import gg.stardust.coresdk.infrastructure.ServerError
import gg.stardust.coresdk.infrastructure.MultiValueMap
import gg.stardust.coresdk.infrastructure.PartConfig
import gg.stardust.coresdk.infrastructure.RequestConfig
import gg.stardust.coresdk.infrastructure.RequestMethod
import gg.stardust.coresdk.infrastructure.ResponseType
import gg.stardust.coresdk.infrastructure.Success
import gg.stardust.coresdk.infrastructure.toMultiValue

class TemplateEndpointsApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://core-api.stardust.gg/v1")
        }
    }

    /**
     * Get Template Count
     * Get a Template&#39;s Count Within a Game
     * @param filter Find a substring within the Template name field (optional)
     * @return SDTemplateCountResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun templateCountGet(filter: kotlin.String? = null) : SDTemplateCountResponse {
        val localVarResponse = templateCountGetWithHttpInfo(filter = filter)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SDTemplateCountResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Template Count
     * Get a Template&#39;s Count Within a Game
     * @param filter Find a substring within the Template name field (optional)
     * @return ApiResponse<SDTemplateCountResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun templateCountGetWithHttpInfo(filter: kotlin.String?) : ApiResponse<SDTemplateCountResponse?> {
        val localVariableConfig = templateCountGetRequestConfig(filter = filter)

        return request<Unit, SDTemplateCountResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation templateCountGet
     *
     * @param filter Find a substring within the Template name field (optional)
     * @return RequestConfig
     */
    fun templateCountGetRequestConfig(filter: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (filter != null) {
                    put("filter", listOf(filter.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/template/count",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Create Template
     * Adds a New Token Template that lets Players Acquire that Token using the Token/Mint Endpoint
     * @param sdTemplateCreateRequest 
     * @return SDTemplateCreateResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun templateCreatePost(sdTemplateCreateRequest: SDTemplateCreateRequest) : SDTemplateCreateResponse {
        val localVarResponse = templateCreatePostWithHttpInfo(sdTemplateCreateRequest = sdTemplateCreateRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SDTemplateCreateResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create Template
     * Adds a New Token Template that lets Players Acquire that Token using the Token/Mint Endpoint
     * @param sdTemplateCreateRequest 
     * @return ApiResponse<SDTemplateCreateResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun templateCreatePostWithHttpInfo(sdTemplateCreateRequest: SDTemplateCreateRequest) : ApiResponse<SDTemplateCreateResponse?> {
        val localVariableConfig = templateCreatePostRequestConfig(sdTemplateCreateRequest = sdTemplateCreateRequest)

        return request<SDTemplateCreateRequest, SDTemplateCreateResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation templateCreatePost
     *
     * @param sdTemplateCreateRequest 
     * @return RequestConfig
     */
    fun templateCreatePostRequestConfig(sdTemplateCreateRequest: SDTemplateCreateRequest) : RequestConfig<SDTemplateCreateRequest> {
        val localVariableBody = sdTemplateCreateRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/template/create",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get All Templates
     * Get All of the Templates Within a Game
     * @param start position in list
     * @param limit maximum templates returned in list
     * @param filter Find a substring within the Template name field (optional)
     * @return kotlin.collections.List<SDTemplateGetAllResponse>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun templateGetAllGet(start: kotlin.String, limit: kotlin.String, filter: kotlin.String? = null) : kotlin.collections.List<SDTemplateGetAllResponse> {
        val localVarResponse = templateGetAllGetWithHttpInfo(start = start, limit = limit, filter = filter)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<SDTemplateGetAllResponse>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get All Templates
     * Get All of the Templates Within a Game
     * @param start position in list
     * @param limit maximum templates returned in list
     * @param filter Find a substring within the Template name field (optional)
     * @return ApiResponse<kotlin.collections.List<SDTemplateGetAllResponse>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun templateGetAllGetWithHttpInfo(start: kotlin.String, limit: kotlin.String, filter: kotlin.String?) : ApiResponse<kotlin.collections.List<SDTemplateGetAllResponse>?> {
        val localVariableConfig = templateGetAllGetRequestConfig(start = start, limit = limit, filter = filter)

        return request<Unit, kotlin.collections.List<SDTemplateGetAllResponse>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation templateGetAllGet
     *
     * @param start position in list
     * @param limit maximum templates returned in list
     * @param filter Find a substring within the Template name field (optional)
     * @return RequestConfig
     */
    fun templateGetAllGetRequestConfig(start: kotlin.String, limit: kotlin.String, filter: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("start", listOf(start.toString()))
                if (filter != null) {
                    put("filter", listOf(filter.toString()))
                }
                put("limit", listOf(limit.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/template/get-all",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Template
     * Get the Details of a Template
     * @param templateId Template Id such as 3589)
     * @return SDTemplateGetResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun templateGetGet(templateId: kotlin.String) : SDTemplateGetResponse {
        val localVarResponse = templateGetGetWithHttpInfo(templateId = templateId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SDTemplateGetResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Template
     * Get the Details of a Template
     * @param templateId Template Id such as 3589)
     * @return ApiResponse<SDTemplateGetResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun templateGetGetWithHttpInfo(templateId: kotlin.String) : ApiResponse<SDTemplateGetResponse?> {
        val localVariableConfig = templateGetGetRequestConfig(templateId = templateId)

        return request<Unit, SDTemplateGetResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation templateGetGet
     *
     * @param templateId Template Id such as 3589)
     * @return RequestConfig
     */
    fun templateGetGetRequestConfig(templateId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("templateId", listOf(templateId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/template/get",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Template Tokens
     * Get a List of All Minted Tokens from a Given Template
     * @param templateId The ID of the Template
     * @param start position in list (optional)
     * @param limit maximum templates returned in list (optional)
     * @param includeDeleted If true tokens from deleted players are included in the response (optional)
     * @return kotlin.collections.List<SDTemplateGetTokensResponse>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun templateGetTokensGet(templateId: kotlin.String, start: kotlin.String? = null, limit: kotlin.String? = null, includeDeleted: kotlin.String? = null) : kotlin.collections.List<SDTemplateGetTokensResponse> {
        val localVarResponse = templateGetTokensGetWithHttpInfo(templateId = templateId, start = start, limit = limit, includeDeleted = includeDeleted)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<SDTemplateGetTokensResponse>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Template Tokens
     * Get a List of All Minted Tokens from a Given Template
     * @param templateId The ID of the Template
     * @param start position in list (optional)
     * @param limit maximum templates returned in list (optional)
     * @param includeDeleted If true tokens from deleted players are included in the response (optional)
     * @return ApiResponse<kotlin.collections.List<SDTemplateGetTokensResponse>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun templateGetTokensGetWithHttpInfo(templateId: kotlin.String, start: kotlin.String?, limit: kotlin.String?, includeDeleted: kotlin.String?) : ApiResponse<kotlin.collections.List<SDTemplateGetTokensResponse>?> {
        val localVariableConfig = templateGetTokensGetRequestConfig(templateId = templateId, start = start, limit = limit, includeDeleted = includeDeleted)

        return request<Unit, kotlin.collections.List<SDTemplateGetTokensResponse>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation templateGetTokensGet
     *
     * @param templateId The ID of the Template
     * @param start position in list (optional)
     * @param limit maximum templates returned in list (optional)
     * @param includeDeleted If true tokens from deleted players are included in the response (optional)
     * @return RequestConfig
     */
    fun templateGetTokensGetRequestConfig(templateId: kotlin.String, start: kotlin.String?, limit: kotlin.String?, includeDeleted: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (start != null) {
                    put("start", listOf(start.toString()))
                }
                put("templateId", listOf(templateId.toString()))
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (includeDeleted != null) {
                    put("includeDeleted", listOf(includeDeleted.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/template/get-tokens",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Mutate Template
     * Mutates a Property of a Template, Which in Turn will Affect the Inherited Property on All of the Tokens Created from this Template (via token/mint)
     * @param sdTemplateMutateRequest 
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun templateMutatePut(sdTemplateMutateRequest: SDTemplateMutateRequest) : kotlin.Any {
        val localVarResponse = templateMutatePutWithHttpInfo(sdTemplateMutateRequest = sdTemplateMutateRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Mutate Template
     * Mutates a Property of a Template, Which in Turn will Affect the Inherited Property on All of the Tokens Created from this Template (via token/mint)
     * @param sdTemplateMutateRequest 
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun templateMutatePutWithHttpInfo(sdTemplateMutateRequest: SDTemplateMutateRequest) : ApiResponse<kotlin.Any?> {
        val localVariableConfig = templateMutatePutRequestConfig(sdTemplateMutateRequest = sdTemplateMutateRequest)

        return request<SDTemplateMutateRequest, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation templateMutatePut
     *
     * @param sdTemplateMutateRequest 
     * @return RequestConfig
     */
    fun templateMutatePutRequestConfig(sdTemplateMutateRequest: SDTemplateMutateRequest) : RequestConfig<SDTemplateMutateRequest> {
        val localVariableBody = sdTemplateMutateRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/template/mutate",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Remove Template Property
     * Removes a Templates Property from Your Game
     * @param templateId Template Id returned from template/create (ex. 5)
     * @param props Stringify Array of template mutable property names ex: &#39;[\&quot;exp\&quot;, \&quot;health\&quot;]&#39; }
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun templatePropsRemoveDelete(templateId: kotlin.String, props: kotlin.String) : kotlin.Any {
        val localVarResponse = templatePropsRemoveDeleteWithHttpInfo(templateId = templateId, props = props)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Remove Template Property
     * Removes a Templates Property from Your Game
     * @param templateId Template Id returned from template/create (ex. 5)
     * @param props Stringify Array of template mutable property names ex: &#39;[\&quot;exp\&quot;, \&quot;health\&quot;]&#39; }
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun templatePropsRemoveDeleteWithHttpInfo(templateId: kotlin.String, props: kotlin.String) : ApiResponse<kotlin.Any?> {
        val localVariableConfig = templatePropsRemoveDeleteRequestConfig(templateId = templateId, props = props)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation templatePropsRemoveDelete
     *
     * @param templateId Template Id returned from template/create (ex. 5)
     * @param props Stringify Array of template mutable property names ex: &#39;[\&quot;exp\&quot;, \&quot;health\&quot;]&#39; }
     * @return RequestConfig
     */
    fun templatePropsRemoveDeleteRequestConfig(templateId: kotlin.String, props: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("templateId", listOf(templateId.toString()))
                put("props", listOf(props.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/template/props-remove",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Remove Template
     * Removes a Template from Your Game. If Players have Instances of this Template from the token/mint Command, Their Tokens will NOT be Removed
     * @param templateId Template Id returned from template/create (ex. 5)
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun templateRemoveDelete(templateId: kotlin.String) : kotlin.Any {
        val localVarResponse = templateRemoveDeleteWithHttpInfo(templateId = templateId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Remove Template
     * Removes a Template from Your Game. If Players have Instances of this Template from the token/mint Command, Their Tokens will NOT be Removed
     * @param templateId Template Id returned from template/create (ex. 5)
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun templateRemoveDeleteWithHttpInfo(templateId: kotlin.String) : ApiResponse<kotlin.Any?> {
        val localVariableConfig = templateRemoveDeleteRequestConfig(templateId = templateId)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation templateRemoveDelete
     *
     * @param templateId Template Id returned from template/create (ex. 5)
     * @return RequestConfig
     */
    fun templateRemoveDeleteRequestConfig(templateId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("templateId", listOf(templateId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/template/remove",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
