/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package gg.stardust.coresdk.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import gg.stardust.coresdk.models.Error
import gg.stardust.coresdk.models.SDGameGetResponse
import gg.stardust.coresdk.models.SDGameMutateRequest

import com.squareup.moshi.Json

import gg.stardust.coresdk.infrastructure.ApiClient
import gg.stardust.coresdk.infrastructure.ApiResponse
import gg.stardust.coresdk.infrastructure.ClientException
import gg.stardust.coresdk.infrastructure.ClientError
import gg.stardust.coresdk.infrastructure.ServerException
import gg.stardust.coresdk.infrastructure.ServerError
import gg.stardust.coresdk.infrastructure.MultiValueMap
import gg.stardust.coresdk.infrastructure.PartConfig
import gg.stardust.coresdk.infrastructure.RequestConfig
import gg.stardust.coresdk.infrastructure.RequestMethod
import gg.stardust.coresdk.infrastructure.ResponseType
import gg.stardust.coresdk.infrastructure.Success
import gg.stardust.coresdk.infrastructure.toMultiValue

class GameEndpointsApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://core-api.stardust.gg/v1")
        }
    }

    /**
     * Get Game
     * Get the Details of Your Game
     * @return SDGameGetResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun gameGetGet() : SDGameGetResponse {
        val localVarResponse = gameGetGetWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SDGameGetResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Game
     * Get the Details of Your Game
     * @return ApiResponse<SDGameGetResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun gameGetGetWithHttpInfo() : ApiResponse<SDGameGetResponse?> {
        val localVariableConfig = gameGetGetRequestConfig()

        return request<Unit, SDGameGetResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation gameGetGet
     *
     * @return RequestConfig
     */
    fun gameGetGetRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/game/get",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Mutate Game
     * Change a games data
     * @param sdGameMutateRequest 
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun gameMutatePut(sdGameMutateRequest: SDGameMutateRequest) : kotlin.Any {
        val localVarResponse = gameMutatePutWithHttpInfo(sdGameMutateRequest = sdGameMutateRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Mutate Game
     * Change a games data
     * @param sdGameMutateRequest 
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun gameMutatePutWithHttpInfo(sdGameMutateRequest: SDGameMutateRequest) : ApiResponse<kotlin.Any?> {
        val localVariableConfig = gameMutatePutRequestConfig(sdGameMutateRequest = sdGameMutateRequest)

        return request<SDGameMutateRequest, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation gameMutatePut
     *
     * @param sdGameMutateRequest 
     * @return RequestConfig
     */
    fun gameMutatePutRequestConfig(sdGameMutateRequest: SDGameMutateRequest) : RequestConfig<SDGameMutateRequest> {
        val localVariableBody = sdGameMutateRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/game/mutate",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
