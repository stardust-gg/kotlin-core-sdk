/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package gg.stardust.coresdk.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import gg.stardust.coresdk.models.Error
import gg.stardust.coresdk.models.SDPlayerCountResponse
import gg.stardust.coresdk.models.SDPlayerCreateRequest
import gg.stardust.coresdk.models.SDPlayerCreateResponse
import gg.stardust.coresdk.models.SDPlayerGetAllResponse
import gg.stardust.coresdk.models.SDPlayerGetIdResponse
import gg.stardust.coresdk.models.SDPlayerGetIdsResponse
import gg.stardust.coresdk.models.SDPlayerGetInventoryResponse
import gg.stardust.coresdk.models.SDPlayerGetResponse
import gg.stardust.coresdk.models.SDPlayerMutateRequest
import gg.stardust.coresdk.models.SDPlayerWalletGetResponse
import gg.stardust.coresdk.models.SDPlayerWithdrawRequest

import com.squareup.moshi.Json

import gg.stardust.coresdk.infrastructure.ApiClient
import gg.stardust.coresdk.infrastructure.ApiResponse
import gg.stardust.coresdk.infrastructure.ClientException
import gg.stardust.coresdk.infrastructure.ClientError
import gg.stardust.coresdk.infrastructure.ServerException
import gg.stardust.coresdk.infrastructure.ServerError
import gg.stardust.coresdk.infrastructure.MultiValueMap
import gg.stardust.coresdk.infrastructure.PartConfig
import gg.stardust.coresdk.infrastructure.RequestConfig
import gg.stardust.coresdk.infrastructure.RequestMethod
import gg.stardust.coresdk.infrastructure.ResponseType
import gg.stardust.coresdk.infrastructure.Success
import gg.stardust.coresdk.infrastructure.toMultiValue

class PlayerEndpointsApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://core-api.stardust.gg/v1")
        }
    }

    /**
     * Get Player Count
     * Get Player count within a game
     * @return SDPlayerCountResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun playerCountGet() : SDPlayerCountResponse {
        val localVarResponse = playerCountGetWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SDPlayerCountResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Player Count
     * Get Player count within a game
     * @return ApiResponse<SDPlayerCountResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun playerCountGetWithHttpInfo() : ApiResponse<SDPlayerCountResponse?> {
        val localVariableConfig = playerCountGetRequestConfig()

        return request<Unit, SDPlayerCountResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation playerCountGet
     *
     * @return RequestConfig
     */
    fun playerCountGetRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/player/count",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Create Player
     * Create a Player for a game. Returns their player id which can be used to reference them later in Stardust&#39;s system
     * @param sdPlayerCreateRequest 
     * @return SDPlayerCreateResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun playerCreatePost(sdPlayerCreateRequest: SDPlayerCreateRequest) : SDPlayerCreateResponse {
        val localVarResponse = playerCreatePostWithHttpInfo(sdPlayerCreateRequest = sdPlayerCreateRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SDPlayerCreateResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create Player
     * Create a Player for a game. Returns their player id which can be used to reference them later in Stardust&#39;s system
     * @param sdPlayerCreateRequest 
     * @return ApiResponse<SDPlayerCreateResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun playerCreatePostWithHttpInfo(sdPlayerCreateRequest: SDPlayerCreateRequest) : ApiResponse<SDPlayerCreateResponse?> {
        val localVariableConfig = playerCreatePostRequestConfig(sdPlayerCreateRequest = sdPlayerCreateRequest)

        return request<SDPlayerCreateRequest, SDPlayerCreateResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation playerCreatePost
     *
     * @param sdPlayerCreateRequest 
     * @return RequestConfig
     */
    fun playerCreatePostRequestConfig(sdPlayerCreateRequest: SDPlayerCreateRequest) : RequestConfig<SDPlayerCreateRequest> {
        val localVariableBody = sdPlayerCreateRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/player/create",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get All Players
     * Get the List of All Players in Game
     * @param start position in list (optional)
     * @param filter Find a substring within the Player unique ID field (optional)
     * @param limit maximum items returned in list (optional)
     * @return kotlin.collections.List<SDPlayerGetAllResponse>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun playerGetAllGet(start: kotlin.String? = null, filter: kotlin.String? = null, limit: kotlin.String? = null) : kotlin.collections.List<SDPlayerGetAllResponse> {
        val localVarResponse = playerGetAllGetWithHttpInfo(start = start, filter = filter, limit = limit)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<SDPlayerGetAllResponse>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get All Players
     * Get the List of All Players in Game
     * @param start position in list (optional)
     * @param filter Find a substring within the Player unique ID field (optional)
     * @param limit maximum items returned in list (optional)
     * @return ApiResponse<kotlin.collections.List<SDPlayerGetAllResponse>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun playerGetAllGetWithHttpInfo(start: kotlin.String?, filter: kotlin.String?, limit: kotlin.String?) : ApiResponse<kotlin.collections.List<SDPlayerGetAllResponse>?> {
        val localVariableConfig = playerGetAllGetRequestConfig(start = start, filter = filter, limit = limit)

        return request<Unit, kotlin.collections.List<SDPlayerGetAllResponse>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation playerGetAllGet
     *
     * @param start position in list (optional)
     * @param filter Find a substring within the Player unique ID field (optional)
     * @param limit maximum items returned in list (optional)
     * @return RequestConfig
     */
    fun playerGetAllGetRequestConfig(start: kotlin.String?, filter: kotlin.String?, limit: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (start != null) {
                    put("start", listOf(start.toString()))
                }
                if (filter != null) {
                    put("filter", listOf(filter.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/player/get-all",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Player
     * Get Details of a Player Within a Game
     * @param playerId Player id
     * @return SDPlayerGetResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun playerGetGet(playerId: kotlin.String) : SDPlayerGetResponse {
        val localVarResponse = playerGetGetWithHttpInfo(playerId = playerId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SDPlayerGetResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Player
     * Get Details of a Player Within a Game
     * @param playerId Player id
     * @return ApiResponse<SDPlayerGetResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun playerGetGetWithHttpInfo(playerId: kotlin.String) : ApiResponse<SDPlayerGetResponse?> {
        val localVariableConfig = playerGetGetRequestConfig(playerId = playerId)

        return request<Unit, SDPlayerGetResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation playerGetGet
     *
     * @param playerId Player id
     * @return RequestConfig
     */
    fun playerGetGetRequestConfig(playerId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("playerId", listOf(playerId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/player/get",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Player ID
     * Get a Player&#39;s ID via their Unique ID
     * @param uniqueId Player&#39;s Unique ID
     * @return SDPlayerGetIdResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun playerGetIdGet(uniqueId: kotlin.String) : SDPlayerGetIdResponse {
        val localVarResponse = playerGetIdGetWithHttpInfo(uniqueId = uniqueId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SDPlayerGetIdResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Player ID
     * Get a Player&#39;s ID via their Unique ID
     * @param uniqueId Player&#39;s Unique ID
     * @return ApiResponse<SDPlayerGetIdResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun playerGetIdGetWithHttpInfo(uniqueId: kotlin.String) : ApiResponse<SDPlayerGetIdResponse?> {
        val localVariableConfig = playerGetIdGetRequestConfig(uniqueId = uniqueId)

        return request<Unit, SDPlayerGetIdResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation playerGetIdGet
     *
     * @param uniqueId Player&#39;s Unique ID
     * @return RequestConfig
     */
    fun playerGetIdGetRequestConfig(uniqueId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("uniqueId", listOf(uniqueId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/player/get-id",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get All Player IDs
     * Get All Player IDs for a Given Game
     * @return kotlin.collections.List<SDPlayerGetIdsResponse>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun playerGetIdsGet() : kotlin.collections.List<SDPlayerGetIdsResponse> {
        val localVarResponse = playerGetIdsGetWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<SDPlayerGetIdsResponse>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get All Player IDs
     * Get All Player IDs for a Given Game
     * @return ApiResponse<kotlin.collections.List<SDPlayerGetIdsResponse>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun playerGetIdsGetWithHttpInfo() : ApiResponse<kotlin.collections.List<SDPlayerGetIdsResponse>?> {
        val localVariableConfig = playerGetIdsGetRequestConfig()

        return request<Unit, kotlin.collections.List<SDPlayerGetIdsResponse>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation playerGetIdsGet
     *
     * @return RequestConfig
     */
    fun playerGetIdsGetRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/player/get-ids",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Player Inventory
     * Get a players inventory and all the items it holds
     * @param playerId Player id
     * @param start position in list (optional)
     * @param tokenIds Comma-Separated String of token ids (ex. &#39;3589, 3580&#39;) (optional)
     * @param limit maximum items returned in list (optional)
     * @return kotlin.collections.List<SDPlayerGetInventoryResponse>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun playerGetInventoryGet(playerId: kotlin.String, start: kotlin.String? = null, tokenIds: kotlin.String? = null, limit: kotlin.String? = null) : kotlin.collections.List<SDPlayerGetInventoryResponse> {
        val localVarResponse = playerGetInventoryGetWithHttpInfo(playerId = playerId, start = start, tokenIds = tokenIds, limit = limit)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<SDPlayerGetInventoryResponse>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Player Inventory
     * Get a players inventory and all the items it holds
     * @param playerId Player id
     * @param start position in list (optional)
     * @param tokenIds Comma-Separated String of token ids (ex. &#39;3589, 3580&#39;) (optional)
     * @param limit maximum items returned in list (optional)
     * @return ApiResponse<kotlin.collections.List<SDPlayerGetInventoryResponse>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun playerGetInventoryGetWithHttpInfo(playerId: kotlin.String, start: kotlin.String?, tokenIds: kotlin.String?, limit: kotlin.String?) : ApiResponse<kotlin.collections.List<SDPlayerGetInventoryResponse>?> {
        val localVariableConfig = playerGetInventoryGetRequestConfig(playerId = playerId, start = start, tokenIds = tokenIds, limit = limit)

        return request<Unit, kotlin.collections.List<SDPlayerGetInventoryResponse>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation playerGetInventoryGet
     *
     * @param playerId Player id
     * @param start position in list (optional)
     * @param tokenIds Comma-Separated String of token ids (ex. &#39;3589, 3580&#39;) (optional)
     * @param limit maximum items returned in list (optional)
     * @return RequestConfig
     */
    fun playerGetInventoryGetRequestConfig(playerId: kotlin.String, start: kotlin.String?, tokenIds: kotlin.String?, limit: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (start != null) {
                    put("start", listOf(start.toString()))
                }
                if (tokenIds != null) {
                    put("tokenIds", listOf(tokenIds.toString()))
                }
                put("playerId", listOf(playerId.toString()))
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/player/get-inventory",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Mutate Player
     * Change player data
     * @param sdPlayerMutateRequest 
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun playerMutatePut(sdPlayerMutateRequest: SDPlayerMutateRequest) : kotlin.Any {
        val localVarResponse = playerMutatePutWithHttpInfo(sdPlayerMutateRequest = sdPlayerMutateRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Mutate Player
     * Change player data
     * @param sdPlayerMutateRequest 
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun playerMutatePutWithHttpInfo(sdPlayerMutateRequest: SDPlayerMutateRequest) : ApiResponse<kotlin.Any?> {
        val localVariableConfig = playerMutatePutRequestConfig(sdPlayerMutateRequest = sdPlayerMutateRequest)

        return request<SDPlayerMutateRequest, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation playerMutatePut
     *
     * @param sdPlayerMutateRequest 
     * @return RequestConfig
     */
    fun playerMutatePutRequestConfig(sdPlayerMutateRequest: SDPlayerMutateRequest) : RequestConfig<SDPlayerMutateRequest> {
        val localVariableBody = sdPlayerMutateRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/player/mutate",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Remove Player
     * Removes (hides) a player from your game. This is not permanent.
     * @param playerId Player Id returned from player/create a UUID, i.e. 802760b0-2bb5-4fba-9237-895ed02cf8d8
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun playerRemoveDelete(playerId: kotlin.String) : kotlin.Any {
        val localVarResponse = playerRemoveDeleteWithHttpInfo(playerId = playerId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Remove Player
     * Removes (hides) a player from your game. This is not permanent.
     * @param playerId Player Id returned from player/create a UUID, i.e. 802760b0-2bb5-4fba-9237-895ed02cf8d8
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun playerRemoveDeleteWithHttpInfo(playerId: kotlin.String) : ApiResponse<kotlin.Any?> {
        val localVariableConfig = playerRemoveDeleteRequestConfig(playerId = playerId)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation playerRemoveDelete
     *
     * @param playerId Player Id returned from player/create a UUID, i.e. 802760b0-2bb5-4fba-9237-895ed02cf8d8
     * @return RequestConfig
     */
    fun playerRemoveDeleteRequestConfig(playerId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("playerId", listOf(playerId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/player/remove",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Player Wallet
     * Get player&#39;s wallet within a game
     * @param playerId Player id
     * @return SDPlayerWalletGetResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun playerWalletGetGet(playerId: kotlin.String) : SDPlayerWalletGetResponse {
        val localVarResponse = playerWalletGetGetWithHttpInfo(playerId = playerId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SDPlayerWalletGetResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Player Wallet
     * Get player&#39;s wallet within a game
     * @param playerId Player id
     * @return ApiResponse<SDPlayerWalletGetResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun playerWalletGetGetWithHttpInfo(playerId: kotlin.String) : ApiResponse<SDPlayerWalletGetResponse?> {
        val localVariableConfig = playerWalletGetGetRequestConfig(playerId = playerId)

        return request<Unit, SDPlayerWalletGetResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation playerWalletGetGet
     *
     * @param playerId Player id
     * @return RequestConfig
     */
    fun playerWalletGetGetRequestConfig(playerId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("playerId", listOf(playerId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/player/wallet-get",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Withdraw From Player
     * Withdraw a Player&#39;s Tokens from their Stardust Wallet
     * @param sdPlayerWithdrawRequest 
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun playerWithdrawPost(sdPlayerWithdrawRequest: SDPlayerWithdrawRequest) : kotlin.Any {
        val localVarResponse = playerWithdrawPostWithHttpInfo(sdPlayerWithdrawRequest = sdPlayerWithdrawRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Withdraw From Player
     * Withdraw a Player&#39;s Tokens from their Stardust Wallet
     * @param sdPlayerWithdrawRequest 
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun playerWithdrawPostWithHttpInfo(sdPlayerWithdrawRequest: SDPlayerWithdrawRequest) : ApiResponse<kotlin.Any?> {
        val localVariableConfig = playerWithdrawPostRequestConfig(sdPlayerWithdrawRequest = sdPlayerWithdrawRequest)

        return request<SDPlayerWithdrawRequest, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation playerWithdrawPost
     *
     * @param sdPlayerWithdrawRequest 
     * @return RequestConfig
     */
    fun playerWithdrawPostRequestConfig(sdPlayerWithdrawRequest: SDPlayerWithdrawRequest) : RequestConfig<SDPlayerWithdrawRequest> {
        val localVariableBody = sdPlayerWithdrawRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/player/withdraw",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
